#!/command/with-contenv bash

configure_logging() {
    print_debug "Configuring Logging"
    case "${LOG_TYPE,,}" in
		"file" )
		    mkdir -p "${LOG_PATH}"
		    chown -R "${COTURN_USER}":"${COTURN_GROUP}" "${LOG_PATH}"
			logging=$(cat<<EOF
log-file=${LOG_PATH}/${LOG_FILE}
no-stdout-log
simple-log
new-log-timestamp
EOF
            )

			create_logrotate coturn ${LOG_PATH}/${LOG_FILE}
		;;
		"console" )
		    logging=$(cat<<EOF
log-file=-
EOF
            )
		;;
		"both" )
		    mkdir -p "${LOG_PATH}"
		    chown -R "${COTURN_USER}":"${COTURN_GROUP}" "${LOG_PATH}"
		    logging=$(cat<<EOF
log-file=${LOG_PATH}/${LOG_FILE}
simple-log
new-log-timestamp
EOF
            )
		;;
	esac

    ### Translate Logging
    case "${LOG_LEVEL,,}" in
        "verbose" )
	        log_level=$(cat<<EOF
verbose
EOF
    	        )
        ;;
        "normal" )
        	:
        ;;
        "debug" )
        	log_level=$(cat<<EOF
verbose
Verbose
EOF
            	)
        ;;
    esac
}

create_config() {
    if [ "${SETUP_TYPE,,}" = "auto" ]; then
    	print_notice "Auto Configuring Coturn"

		case "${DB_TYPE,,}" in
			sqlite* )
				print_debug "Setting SQLite3 DB Type"
				mkdir -p "$(dirname ${DB_SQLITE_FILE})"
				chown -R "${COTURN_USER}":"${COTURN_GROUP}" "$(dirname ${DB_SQLITE_FILE})"
				db_string="userdb=${DB_SQLITE_FILE}"
			;;
			mongo* )
				print_debug "Setting Mongo DB Type"
				DB_PORT=${DB_PORT:-"27017"}
				sanity_db mongo
				db_ready mongo
				db_string="mongo-userdb=\"mongodb://[${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}\""
			;;
			mysql | maria* )
				print_debug "Setting MariaDB DB Type"
				DB_PORT=${DB_PORT:-"3306"}
				sanity_db mariadb
				db_ready mariadb
				db_string="mysql-userdb=\"host=${DB_HOST} dbname=${DB_NAME} user=${DB_USER} password=${DB_PASS} port=${DB_PORT} connect_timeout=${DB_TIMEOUT_CONNECT} read_timeout=${DB_TIMEOUT_READ}\""
			;;
			postgres* | psql* )
				print_debug "Setting Postgres DB Type"
				DB_PORT=${DB_PORT:-"5472"}
				sanity_db postgres
				db_ready postgres
				db_string="psql-userdb=\"host=${DB_HOST} dbname=${DB_NAME} user=${DB_USER} password=${DB_PASS} connect_timeout=${DB_TIMEOUT_CONNECT}\""
			;;
			redis* )
				print_debug "Setting Redis Data Type"
				DB_PORT=${DB_PORT:-"6379"}
				DB_NAME=${DB_NAME:-"0"}
				sanity_db redis
				db_ready redis
				db_string=$(cat<<EOF
db_string="redis-userdb=\"ip=${DB_HOST} dbname=${DB_NAME} password=${DB_PASS} port=${DB_PORT} connect_timeout=${DB_TIMEOUT_CONNECT}\""
db_string="redis-statsdb=\"ip=${DB_HOST} dbname=${DB_NAME} password=${DB_PASS} port=${DB_PORT} connect_timeout=${DB_TIMEOUT_CONNECT}\""
EOF
				)
			;;
		esac

		if var_true "${ENABLE_TCP_REVERSE_PROXY}" ; then
			print_debug "Enabling Reverse Proxy Support on port ${TCP_REVERSE_PROXY_PORT}"
			tcp_reverse_proxy_port=$(cat<<EOF
tcp-proxy-port=${TCP_REVERSE_PROXY_PORT}
EOF
						            )
    	fi

		if [ -n "${LISTEN_IP}" ]; then
			listen_ip_array=$(echo ${LISTEN_IP} | tr "," "\n")
			for ip in $listen_ip_array
				do
				print_debug "Updating Listen IP with ${ip}"
				listen_ip=$(echo "${listen_ip}" ; cat<<EOF
listening-ip=${LISTEN_IP}
EOF
				)
			done
		fi

		if [ -n "${ALTERNATE_SERVER}" ] ; then
			print_debug "Setting Alternate Server ${ALTERNATE_SERVER}"
			alternate_server=$(cat<<EOF
alternate-server=${ALTERNATE_SERVER}
EOF
			)
		fi

		if [ -n "${AUX_SERVER}" ]; then
			aux_server_array=$(echo $AUX_SERVER | tr "," "\n")
			for aux in $aux_server_array
				do
				print_debug "Updating Aux Server with ${aux}"
				listen_ip=$(echo "${listen_ip}" ; cat<<EOF
aux-server=${AUX_SERVER}
EOF
				)
			done
		fi

		if [ -n "${RELAY_IP}" ]; then
			relay_ip_array=$(echo $RELAY_IP | tr "," "\n")
			for ip in $relay_ip_array
				do
				print_debug "Updating Relay IP with ${ip}"
				relay_ip=$(echo "${relay_ip}" ; cat<<EOF
relay-ip=${RELAY_IP}
EOF
				)
			done
		fi

		if [ -n "${PEER_IP_DENY}" ] ; then
			print_debug "Denying IP(s) ${PEER_IP_DENY}"
			peer_ip_deny=$(cat<<EOF
denied-peer-ip=${PEER_IP_DENY}
EOF
			)
		fi

		if [ -n "${PEER_IP_ALLOW}" ] ; then
			print_debug "Allow IP(s) ${PEER_IP_ALLOW}"
			peer_ip_allow=$(cat<<EOF
allowed-peer-ip=${PEER_IP_ALLOW}
EOF
			)
		fi

		if [ -n "${EXTERNAL_IP}" ]; then
			external_ip_array=$(echo ${EXTERNAL_IP} | tr "," "\n")
			for ip in $external_ip_array
				do
				print_debug "Updating External IP with ${ip}"
				external_ip=$(echo "${external_ip}" ; cat<<EOF
external-ip=${EXTERNAL_IP}
EOF
				)
			done
		fi

		if [ -n "${REALM}" ] ; then
			print_debug "Setting Realm"
			realm=$(cat <<EOF
realm=${REALM}
EOF
					)
		fi

		if [ -n "${RELAY_THREADS}" ] ; then
			print_debug "Setting Relay Threads to ${RELAY_THREADS}"
			relay_threads=$(cat<<EOF
relay-threads=${RELAY_THREADS}
EOF
				)
		fi

		if var_true "${ENABLE_FINGERPRINT}" ; then
			print_debug "Enabling Fingerprints in TURN messages"
			fingerprint=$(cat<<EOF
fingerprint
EOF
				)
		fi

		if [ -n "${OAUTH_SERVER_NAME}" ]; then
			oauth_server_name=$(cat<<EOF
server-name=${OAUTH_SERVER_NAME}
EOF
				)
		fi

		if var_true "${ENABLE_STUN_SECURE}" ; then
			print_debug "Enabling Secure STUN support"
			secure_stun=$(cat<<EOF
secure_stun
EOF
				)
		fi

		if var_true "${ENABLE_MICE}" ; then
			print_debug "Enabling ICE mobility"
			mice=$(cat<<EOF
mobility
EOF
				)
		fi

		if var_true "${ENABLE_KEEP_ADDRESS_FAMILY}" ; then
			print_debug "Enabling Allocate Address Family (Breaks RFC6156)"
			keep_address_family=$(cat<<EOF
keep-address-family
EOF
				)
		fi

	    if var_true "${WEBADMIN_LISTEN_ON_WORKERS}" ; then
            print_debug "Webadmin: Enabling Listen on Workers (Turn off in Production!)"
            webadmin=$(echo "${webadmin}" ; cat<<EOF
web-admin-listen-on-workers
EOF
				)
    	fi

		if var_true "${ENABLE_PROMETHEUS_EXPORTER}" ; then
			print_debug "Prometheus: Enabling monitoring exporter"
			prometheus=$(cat<<EOF
prometheus
EOF
			)
		fi

		if var_true "${ENABLE_SERVER_RELAY}" ; then
			print_debug "Enabling Server Relay (This is Dangerous!)"
			server_relay=$(cat<<EOF
server-relay
EOF
			)
		fi

		if var_true "${HIDE_SOFTWARE_VERSION}" ; then
			print_debug "Hiding Software Version"
			hide_software_version=$(cat<<EOF
no-software-attribute
EOF
			)
		fi

		if var_false "${ENABLE_UDP}" ; then
			no_udp=$(cat<<EOF
no-udp
EOF
			)
    fi

		if var_false "${ENABLE_TCP}" ; then
			no_tcp=$(cat<<EOF
no-tcp
EOF
			)
		fi

		if var_false "${ENABLE_UDP_RELAY}" ; then
			no_udp_relay=$(cat<<EOF
no-udp-relay
EOF
				)
		fi

		if var_false "${ENABLE_TCP_RELAY}" ; then
			no_tcp_relay=$(cat<<EOF
no-tcp-relay
EOF
				)
		fi

		if var_false "${ENABLE_TLS}" ; then
			no_tls=$(cat<<EOF
no-tls
EOF
            )
	    else
			if [ -n "${TLS_DISABLE_VERSION}" ]; then
				disable_tls_version_array=$(echo "${TLS_DISABLE_VERSION}" | tr "," "\n")
				for version in $disable_tls_version_array
					do
					print_debug "TLS: Disabling TLS Version ${version}"
					disable_tls_version=$(echo "${disable_tls_version}" ; cat<<EOF
no-${version}
EOF
					)
				done
			fi

			if [ "${TLS_DH_PARAM_KEYSIZE}" != "2066" ] ; then
				dhparamkeysize=dh${TLS_DHPARAM_KEYSIZE}
			fi

			if [ -n "${TLS_KEY_PASSWORD}" ] ; then
				pkey_password=$(cat<<EOF
pkey_password=${TLS_KEY_PASSWORD}
EOF
	            )
    	    fi

			if var_true "${TLS_VERIFY_CLIENT}" ; then
				print_debug "TLS: Enabling Client certificate verification"
				tls_verify_client=$(cat<<EOF
CA-file=${TLS_CA_CERT_FILE}
EOF
				)
			fi

			tls_listening_port=$(cat<<EOF
tls-listening-port=${LISTEN_PORT_TLS}
EOF
				)

			alt_tls_listening_port=$(cat <<EOF
alt-tls-listening-port=${LISTEN_PORT_TLS_ALT}
EOF
				)

			if [ -n "${ALTERNATE_SERVER_TLS}" ] ; then
				print_debug "Setting TLS Alternate Server ${ALTERNATE_SERVER_TLS}"
				alternate_server_tls=$(cat<<EOF
tls-alternate-server=${ALTERNATE_SERVER_TLS}
EOF
				)
			fi

			tls=$(cat<<EOF
## TLS
${tls_listening_port}
${alt_tls_listening_port}
cert=${TLS_CERT_FILE}
pkey=${TLS_KEY_FILE}
${pkey_password}
cipher-list="${TLS_CIPHER_LIST}"
${tls_verify_client}
ec-curve-name=${TLS_EC_CURVE_NAME}
${dhparamkeysize}
${disable_tls_version}
${alternate_server_tls}
EOF
			)
    	fi

    	if var_false "${ENABLE_DTLS}" ; then
        	no_dtls=$(cat<<EOF
no-dtls
EOF
	            )
    	fi

    	if var_false "${ENABLE_TURN}" ; then
        	stun_only=$(cat<<EOF
stun-only
EOF
            	)
	    fi

		if var_false "${ENABLE_STUN}" ; then
			turn_only=$(cat<<EOF
no-stun
EOF
	            )
    	fi

		if var_true "${ENABLE_CHECK_ORIGIN_CONSISTENCY}" ; then
			print_debug "Enabling Checking Origin Consistency"
			enable_origin_consistency=$(cat<<EOF
check-origin-consistency
EOF
				)
		fi

		if var_true "${ENABLE_LOOPBACK_PEERS}" ; then
			print_debug "Enabling Lopback Peers (Security Vulnerability!)"
			enable_loopback_peers=$(cat<<EOF
allow-loopback-peers
EOF
				)
		fi

		if var_false "${ENABLE_MULTICAST_PEERS}" ; then
			print_debug "Disabling Multicast Peers"
			enable_multicast_peers=$(cat<<EOF
no-multicast-peers
EOF
				)
		fi

		if var_true "${ENABLE_UDP_SELF_BALANCE}" ; then
			print_debug "Enabling Self Balancing UDP Support"
			udp_self_balance=$(cat<<EOF
udp-self-balance
EOF
				)
		fi

		case "${AUTHENTICATION_MODE,,}" in
			"none" | anon* )
				print_debug "Setting Authentication Mode to Anonymous (Are you sure?)"
				authentication=$(cat<<EOF
no-auth
EOF
                			)
	        ;;
			basic | longterm )
				print_debug "Setting Authentication Mode to Basic (Longterm)"
				if [ ! -f "${CREDENTIALS_FILE}" ]; then
					print_notice "No Credentials File, Creating User Account: coturn Password: coturn"
					echo "coturn:coturn" > "${CREDENTIALS_FILE}"
				fi
				print_debug "Parsing Credentials File"
				while IFS="" read -r line || [ -n "$line" ]
					do
					if [[ "${line}" == *":"* ]] ; then
						username=$(echo $line | cut -d : -f 1)
						password=$(echo $line | cut -d : -f 2)
						credentials=$(echo "${credentials}" ;cat<<EOF
user=${username}:${password}
EOF
		                            )
	                fi
                done < "${CREDENTIALS_FILE}"
	            authentication=$(cat<<EOF
${credentials}
EOF
            			    	)
			;;
			"secret" | "timelimited" )
				print_debug "Setting Authentication Mode to Secrets (Time limited)"
				authentication=$(cat<<EOF
use-auth-secret
static_auth_secret=${AUTH_SECRET}
EOF
								)
			;;
		esac

		if var_true "${ENABLE_LONG_TERM_CREDENTIALS}" ; then
			print_debug "Enabling Long Term Credentials"
			authentication=$(echo ${authentication} ; cat <<EOF
lt-cred-mech
EOF
							)
		fi

		if var_true "${ENABLE_OAUTH}" ; then
			print_debug "Enabling OAuth"
			oauth=$(cat<<EOF
oauth
EOF
				)
		fi

		if var_true "${ENABLE_CLI}" ; then
			print_debug "Enabling CLI"
			cli=$(cat<<EOF
cli-ip=${LISTEN_IP_CLI}
cli-port=${LISTEN_PORT_CLI}
EOF
				)

			if [ -n "${CLI_PASS}" ] ; then
				print_debug "CLI: Setting Password"
				cli=$(echo "${cli}" ; cat<<EOF
cli-password=${CLI_PASS}
EOF
    		        )
	        fi
    	else
        	print_debug "Disabling CLI"
        	cli=$(cat<<EOF
no-cli
EOF
            	)
    	fi

		if var_true "${ENABLE_WEBADMIN}" ; then
			print_debug "Enabling WEBADMIN"
			webadmin=$(cat<<EOF
## Web Admin
web-admin
web-admin-ip=${LISTEN_IP_WEBADMIN}
web-admin-port=${LISTEN_PORT_WEBADMIN}
EOF
				)
		fi

		config_file=$(mktemp)
		cat <<EOF > ${config_file}
# Custom Generated Coturn Server Configuration! Do not edit, instead set ENV Vars
# If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
# Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

## Process Options
proc-user=${COTURN_USER}
proc-group=${COTURN_GROUP}
pidfile="/var/run/turnserver.pid"

## DB
${db_string}

## Logging
${logging}
${log_level}

## Interface and Networking
${listen_ip}
listening-port=${LISTEN_PORT}
alt-listening-port=${LISTEN_PORT_ALT}
${tcp_reverse_proxy_port}
${alternate_server}
${alternate_server_tls}
${relay_ip}
${external_ip}
min-port=${MIN_PORT}
max-port=${MAX_PORT}
${peer_ip_deny}
${peer_ip_allow}

${no_udp}
${no_tcp}
${no_tls}
${no_dtls}
${no_udp_relay}
${no_tcp_relay}

${tls}
${disable_tls_version}

## Authentication
${authentication}
${oauth}
${oauth_server_name}
${realm}

## Command Line
${cli}

${webadmin}

## Settings
${enable_loopback_peers}
${enable_multicast_peers}
${enable_origin_consistency}
${fingerprint}
${hide_software_version}
${keep_address_family}
${mice}
${relay_threads}
${secure_stun}
${server_relay}
${stun_only}
${turn_only}
${udp_self_balance}
${prometheus}
bps-capacity=${BPS_CAPACITY}
channel-lifetime=${LIFETIME_CHANNEL}
max-allocate-lifetime=${LIFETIME_MAX_ALLOCATE}
max-allocate-timeout=${TIMEOUT_MAX_ALLOCATE}
max-bps=${BPS_MAX}
permission-lifetime=${LIFETIME_PERMISSION}
stale-nonce=${LIFETIME_STALE_NONCE}
total-quota=${QUOTA_TOTAL}
user-quota=${QUOTA_USER}
EOF

		cat ${config_file} | awk NF | sed '/^##/i\\n' > "${CONFIG_PATH}"/"${CONFIG_FILE}"
		rm -rf "${config_file}"
	fi
}

check_certificates() {
	if var_true "${ENABLE_TLS}" ; then
	    counter=0
    	while [ ! -f "${TLS_CERT_FILE}" ] ; do
			sleep 5
            (( counter+=5 ))
            print_warn "Checking for existence of TLS Certificate.. ($counter seconds so far)"
			if [[ "${counter}" -gt 30 ]] ; then
				print_error "Sorry - Could not find valid TLS certificate. Either Disable TLS or point your 'TLS_CERT_FILE' to the right place."
				exit 1
			fi
	    done

		counter=0
    	while [ ! -f "${TLS_KEY_FILE}" ] ; do
			sleep 5
            (( counter+=5 ))
            print_warn "Checking for existence of TLS Key.. ($counter seconds so far)"
			if [[ "${counter}" -gt 30 ]] ; then
				print_error "Sorry - Could not find valid TLS certificate. Either Disable TLS or point your 'TLS_KEY_FILE' it to the right place."
				exit 1
			fi
	    done
	fi
}
